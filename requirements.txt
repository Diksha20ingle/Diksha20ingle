{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMmIBPrT0f5JEgUTn+lHRK/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Diksha20ingle/Diksha20ingle/blob/main/requirements.txt\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zDEZRXaXvz_M"
      },
      "outputs": [],
      "source": [
        "# üöÄ STEP 1: Clone nanoGPT and install dependencies\n",
        "!git clone https://github.com/karpathy/nanoGPT.git\n",
        "%cd nanoGPT\n",
        "!pip install -r requirements.txt\n",
        "!pip install tokenizers\n",
        "\n",
        "# üìÅ STEP 2: Create a small chatbot dataset\n",
        "!mkdir -p data/chat\n",
        "\n",
        "sample_chat = \"\"\"User: Hello!\n",
        "Bot: Hi there! How can I help you today?\n",
        "\n",
        "User: What's your name?\n",
        "Bot: I'm a friendly chatbot.\n",
        "\n",
        "User: Tell me a joke.\n",
        "Bot: Why don‚Äôt scientists trust atoms? Because they make up everything!\n",
        "\n",
        "User: Bye!\n",
        "Bot: Goodbye! Have a great day!\n",
        "\"\"\"\n",
        "\n",
        "with open(\"data/chat/chat.txt\", \"w\") as f:\n",
        "    f.write(sample_chat)\n",
        "\n",
        "# üß† STEP 3: Train a Byte-Pair Encoding tokenizer & save tokens\n",
        "from tokenizers import ByteLevelBPETokenizer\n",
        "import os\n",
        "\n",
        "input_file = \"data/chat/chat.txt\"\n",
        "output_dir = \"data/chat\"\n",
        "\n",
        "tokenizer = ByteLevelBPETokenizer()\n",
        "tokenizer.train(files=[input_file], vocab_size=2000, min_frequency=2,\n",
        "                special_tokens=[\"<s>\", \"<pad>\", \"</s>\", \"<unk>\", \"<mask>\"])\n",
        "tokenizer.save_model(output_dir)\n",
        "\n",
        "encodings = tokenizer.encode(open(input_file, \"r\").read())\n",
        "\n",
        "import numpy as np\n",
        "np.array(encodings.ids, dtype=np.uint16).tofile(os.path.join(output_dir, \"train.bin\"))\n",
        "np.array(encodings.ids, dtype=np.uint16).tofile(os.path.join(output_dir, \"val.bin\"))\n",
        "\n",
        "print(\"‚úÖ Tokenization complete. train.bin and val.bin saved.\")\n",
        "\n",
        "# ‚öôÔ∏è STEP 4: Train a tiny model (about 20MB)\n",
        "!python train.py \\\n",
        "  config/train_tiny_shakespeare.py \\\n",
        "  --out_dir=out/chatbot \\\n",
        "  --dataset=chat \\\n",
        "  --eval_iters=20 \\\n",
        "  --log_interval=1 \\\n",
        "  --block_size=128 \\\n",
        "  --batch_size=64 \\\n",
        "  --n_layer=2 \\\n",
        "  --n_head=2 \\\n",
        "  --n_embd=128 \\\n",
        "  --learning_rate=1e-3 \\\n",
        "  --max_iters=2000 \\\n",
        "  --dropout=0.0 \\\n",
        "  --device='cuda'\n",
        "\n",
        "# üí¨ STEP 5: Generate chat response\n",
        "!python sample.py --out_dir=out/chatbot --start=\"User: Hello!\"\n"
      ]
    }
  ]
}